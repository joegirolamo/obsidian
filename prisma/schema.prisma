// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ToolConnection {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  toolName      String
  accessToken   String?  @db.Text
  refreshToken  String?  @db.Text
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, toolName])
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String    @default("USER")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
  toolConnections   ToolConnection[]
  toolConfigurations ToolConfiguration[]
  managedBusinesses Business[] @relation("BusinessAdmin")
  clientPortal      ClientPortal?
  businesses        Business[] @relation("BusinessUsers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  CLIENT
}

model Business {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  industry    String?
  website     String?
  description String?
  properties  String[] @default([])
  connections Json?    @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  adminId     String
  admin       User     @relation("BusinessAdmin", fields: [adminId], references: [id])
  users       User[]   @relation("BusinessUsers")
  clientPortal ClientPortal?
  metrics     Metric[]
  tools       Tool[]
  opportunities Opportunity[]
}

model ClientPortal {
  id          String   @id @default(cuid())
  businessId  String   @unique
  business    Business @relation(fields: [businessId], references: [id])
  clientId    String   @unique
  client      User     @relation(fields: [clientId], references: [id])
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metrics     Metric[]
  toolAccess  ToolAccess[]
}

model Metric {
  id            String   @id @default(cuid())
  name          String
  description   String?
  type          MetricType
  businessId    String
  business      Business @relation(fields: [businessId], references: [id])
  clientPortalId String?
  clientPortal  ClientPortal? @relation(fields: [clientPortalId], references: [id])
  value         String?
  target        String?
  benchmark     String?
  isClientRequested Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum MetricType {
  TEXT
  NUMBER
  BOOLEAN
  SELECT
}

model Tool {
  id          String   @id @default(cuid())
  name        String
  description String?
  businessId  String
  business    Business @relation(fields: [businessId], references: [id])
  toolAccess  ToolAccess[]
  isRequested Boolean  @default(false)
  status      ToolStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([businessId, name])
}

model ToolAccess {
  id            String   @id @default(cuid())
  toolId        String
  tool          Tool     @relation(fields: [toolId], references: [id])
  clientPortalId String
  clientPortal  ClientPortal @relation(fields: [clientPortalId], references: [id])
  isGranted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([toolId, clientPortalId])
}

model Opportunity {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String
  status      OpportunityStatus @default(OPEN)
  businessId  String
  business    Business @relation(fields: [businessId], references: [id])
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OpportunityStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CLOSED
}

enum ToolStatus {
  PENDING
  GRANTED
  DENIED
}

model ToolConfiguration {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  toolName      String
  configuration Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, toolName])
}